// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Prisma Clientを生成するための設定
generator client {
  provider = "prisma-client-js"
}

// 2. データベース接続の設定
datasource db {
  provider = "postgresql" // PostgreSQLを使用
  url      = env("DATABASE_URL")
}

// 3. モデル定義 (ここからがテーブル定義に相当します)

// "users" テーブルの定義
model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique @db.VarChar(50) // UNIQUE制約とVARCHAR(50)を指定
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now()) // DEFAULT CURRENT_TIMESTAMP
  updated_at    DateTime @updatedAt // ON UPDATE CURRENT_TIMESTAMP

  // リレーション: 一人のユーザーは複数のタスクとグループを持つ
  tasks         Task[]
  groups        Group[]
}

// "tasks" テーブルの定義
model Task {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String?  @db.Text // NULLを許容するため '?' をつけ、TEXT型を指定
  completed   Boolean  @default(false)
  due_date    DateTime? @db.Date // NULLを許容し、DATE型を指定

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // リレーション: このタスクは一人のユーザーに所属する
  user        User     @relation(fields: [user_id], references: [id])

  // リレーション: このタスクは複数のグループに所属できる (中間テーブル経由)
  groups      TaskGroup[]

  // インデックスの定義
  @@index([user_id])
  @@index([due_date])
}

// "groups" テーブルの定義
model Group {
  id      Int    @id @default(autoincrement())
  user_id Int
  name    String @db.VarChar(100)

  // リレーション: このグループは一人のユーザーに所属する
  user    User   @relation(fields: [user_id], references: [id])
  
  // リレーション: このグループは複数のタスクを持つことができる (中間テーブル経由)
  tasks   TaskGroup[]
}

// "task_groups" 中間テーブルの定義 (多対多リレーション)
model TaskGroup {
  task_id  Int
  group_id Int

  // リレーション
  task     Task  @relation(fields: [task_id], references: [id])
  group    Group @relation(fields: [group_id], references: [id])

  // 複合主キーの定義 (task_id, group_id)
  @@id([task_id, group_id])
}